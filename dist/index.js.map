{"version":3,"sources":["../index.js"],"names":["inputArrayOrString","Array","isArray","element","promises","map","str","asyncOp","Promise","all","doAsync","require","RandStream","Events","stream","genericPool","RandStringSource","randStreamInstance","readStream","Readable","nextEnclosedString","finish","nextString","on","chunk","text","toString","char","emit","setTimeout","process","exit","EventEmitter","ResourceManager","count","initialize","factory","create","destroy","client","opts","max","min","myPool","createPool","callback","acquire","pool","console","log","timestamp","Date","now","borrow","res","release","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["const asyncOp = require('./lib/lib').asyncOp\nconst RandStream = require('./lib/lib').RandStream\nconst Events = require('events')\nconst stream = require('stream')\nconst genericPool = require('generic-pool')\n// solutions here\n// solution no 1\nasync function doAsync(inputArrayOrString) {\n    try {\n        if (!Array.isArray(inputArrayOrString)) throw 'Input should be an array'\n        for (let element of inputArrayOrString) {\n            if (Array.isArray(element)) {\n                const promises = element.map(async (str) => { return await asyncOp(str) });\n                await Promise.all(promises)\n            } else {\n                if (typeof (inputArrayOrString) != 'string') throw 'Input should only be array of strings'\n                await asyncOp(element)\n            }\n        }\n\n    } catch (err) {\n        return err;\n    }\n}\n\nclass RandStringSource extends Events.EventEmitter {\n    readStream = stream.Readable\n    nextEnclosedString = ''\n    constructor(randStreamInstance) {\n        super()\n        this.readStream = randStreamInstance\n        this.finish()\n    }\n\n    finish() {\n        let nextString = ''\n        this.readStream.on('data', (chunk) => {\n            let text = chunk.toString()\n\n            for (let char of text) {\n                if (char === '.') {\n                    this.emit('data', nextString)\n                    nextString = '\\n'\n                } else {\n                    nextString += char\n                }\n            }\n        })\n\n        setTimeout(() => {\n            process.exit(0)\n        }, 500)\n    }\n}\n\nclass ResourceManager {\n    myPool\n    client\n    constructor(count) {\n        this.initialize(count)\n    }\n\n    initialize(count) {\n\n        const factory = {\n            create: function () {\n                // \n            },\n            destroy: function (client) {\n                // \n            }\n        };\n\n        const opts = {\n            max: count, // maximum size of the pool\n            min: count // minimum size of the pool\n        };\n\n        this.myPool = genericPool.createPool(factory, opts)\n    }\n\n    async borrow(callback) {\n        // let pool = this.myPool\n        const client = await this.myPool.acquire()\n        callback({ client, pool: this.myPool })\n    }\n}\n\n\n/** SAMPLES */\n\n/**\n * Problem 1\n \nlet input = [\n    'A',\n    ['B', 'C'],\n    'D'\n]\n\ndoAsync(input);\n*/\n/**\n * Problem 2\n \nconst myEmitter = new RandStringSource(new RandStream());\nmyEmitter.on('data', (chunk) => {\n    console.log('EMMITTED: ', chunk.toString())\n})\n*/\n\n\n/**\n * Problem 3\n */\n\nlet pool = new ResourceManager(2);\nconsole.log('START');\n\nlet timestamp = Date.now();\n\npool.borrow((res) => {\n    console.log('RES: 1');\n    setTimeout(() => {\n        res.pool.release(res.client)\n    }, 500);\n});\n\npool.borrow((res) => {\n    console.log('RES: 2');\n    // res.pool.release(res.client)\n});\n\npool.borrow((res) => {\n    console.log('RES: 3');\n    console.log('DURATION: ' + (Date.now() - timestamp));\n});\n\nmodule.exports = {\n    doAsync\n}"]}